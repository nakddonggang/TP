<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">

	<insert id="insertMember" parameterType="net.member.db.MemberDTO">
		insert into member(member_id, member_pass, member_name, member_post, member_address1, member_address2, member_phone, member_email, member_date)
		values (#{member_id}, #{member_pass}, #{member_name}, #{member_post}, #{member_address1}, #{member_address2}, #{member_phone}, #{member_email}, now())
	</insert>
	
	<select id="selectMember" parameterType="String" resultType="net.member.db.MemberDTO">
		select * from member 
		where member_id=#{member_id}
	</select>
	
	<select id="getCheckId" parameterType="String" resultType="int">
		select count(*) from member
		where member_id=#{member_id}
	</select>
	
	<delete id="deleteMember" parameterType="String">
		delete from member where member_id=#{member_id}
	</delete>
	
	<update id="updateMember" parameterType="net.member.db.MemberDTO">
		update member set member_name=#{member_name} , member_post=#{member_post} , member_address1=#{member_address1} , 
		member_address2=#{member_address2} , member_phone=#{member_phone} , member_email=#{member_email} 
		where  member_id=#{member_id}
	</update>
	
	<select id="MemberUseFacilily" parameterType="String" resultType="net.facility.db.FacilityDTO">
		select * from member m join facility f on m.member_id = f.member_id
		where m.member_id=#{member_id}
	</select>
	
	<insert id="insertBasket" parameterType="net.member.db.MemberDTO">
		insert into basket(member_id, book_number, basket_number)
		values (#{member_id}, #{book_number}, #{basket_number})
	</insert>
	
	<select id="basketCheck" parameterType="hashmap" resultType="int">
		select ifnull(count(*),0) from basket where book_number=#{book_number} and member_id=#{member_id}
	</select>
	
	<select id="basketCount" parameterType="hashmap" resultType="int">
		select count(*) from basket where member_id=#{member_id}
	</select>
	
	<select id="MemberBasketList" parameterType="hashmap" resultType="net.member.db.MemberDTO">
		select * from member m
		left join basket b
		on m.member_id = b.member_id
		left join book bk
		on b.book_number = bk.book_number
		where b.member_id=#{member_id} and b.basket_number is not null order by b.basket_number desc
		limit #{startRow}, #{pageSize}
	</select>
	
	<delete id="deleteBasket" parameterType="hashmap">
		delete from basket 
		<where>
		<foreach item="index" collection="deleteList" separator="or">
			basket_number=#{index}
		</foreach>
		</where>
	</delete>
	
	<select id="selectBbook" parameterType="hashmap" resultType="int">
		select ifnull(count(*),0) from bbook where book_number=#{book_number}
	</select>
	
	<select id="selectBbookId" parameterType="int" resultType="String">
		select member_id from bbook where book_number=#{book_number}
	</select>
	
	<select id="rbookNumMax" parameterType="int" resultType="int">
		select ifnull(max(rbook_num),0) from rbook where book_number=#{book_number}
	</select>
	
	<select id="memberRbookCount" parameterType="hashmap" resultType="int">
		select count(*) from rbook where member_id=#{member_id} and book_number=#{book_number}
	</select>
	
	<insert id="insertRbook" parameterType="hashmap">
		insert into rbook(book_number, member_id, rbook_num, rbook_date, rbook_check) 
		values 
		<if test="rbook_num lt 2">(#{book_number}, #{member_id}, #{rbook_num}+1, now(), '1')</if>
		<if test="rbook_num == 2">(#{book_number}, #{member_id}, #{rbook_num}+1, now(), '0')</if>
	</insert>
	
	<update id="updateRbookCheck">
		update rbook set rbook_check='0' where book_number=any(select * from(select distinct book_number from rbook where rbook_num = 3)as r)
	</update>
	
	<update id="updateRbookCheck2">
		update rbook set rbook_check='1' where book_number=any(select * from(select distinct book_number from rbook where rbook_num <![CDATA[< 3]]>)as r)
	</update>
	
	<select id="rbookCkMember" parameterType="hashmap" resultType="int">
		select ifnull(count(*),0) from rbook where book_number=#{book_number} and member_id=#{member_id}
	</select>

	<select id="MemberMyUseBookList" parameterType="hashmap" resultType="net.book.db.BookDTO">
		select* from bbook b
		left join book bk
		on b.book_number = bk.book_number
		where member_id=#{member_id} order by bbook_bdate desc limit #{startRow}, #{endSize};
	</select>
	
	<delete id="deleteRes" parameterType="hashmap">
		delete from basket where book_number=#{book_number} and member_id=#{member_id}
	</delete>
	
	<select id="matchBookNum" parameterType="int" resultType="int">
		select book_number from basket where basket_number=#{basket_number}
	</select>
	
	<select id="basketMaxNum" resultType="int">
		select ifnull(max(basket_number),0) from basket
	</select>
	
	<delete id="deleteBbook" parameterType="int">
		delete from bbook where book_number=#{book_number}
	</delete>
	
	<update id="updateRbook" parameterType="int">
		update rbook set rbook_num=rbook_num-1 where book_number=#{book_number}
	</update>
	
	<delete id="deleteRbook">
		delete from rbook where rbook_num=0
	</delete>
	
	<insert id="insertBbook" parameterType="net.book.db.BookDTO">
		insert into bbook(book_number, bbook_bdate, bbook_rdate, member_id, bbook_bstate) 
		values (#{book_number}, now(), date_add(now(), interval 10 day), #{member_id}, '1')
	</insert>
	
	<insert id="insertHistoryBorrowBook" parameterType="net.book.db.BookDTO">
		insert into history_bbook(book_number, bbook_bdate, bbook_rdate, member_id , bbook_number) 
		values (#{book_number}, now(), date_add(now(), interval 10 day), #{member_id} , #{bbook_number})
	</insert>
	
	<select id="HistoryBorrowMaxBookNumber" resultType="int">
		select ifnull(max(bbook_number),0) from history_bbook
	</select>
	
	<select id="MyBorrowBookCount" parameterType="string" resultType="int">
		select count(*) from bbook where member_id=#{member_id}
	</select>
	
	<delete id="ReturnBorrowBook" parameterType="int">
		delete from bbook where book_number=#{book_number}
	</delete>
	
	<update id="ReturnHistoryBorrowBook" parameterType="int">
		update history_bbook set bbook_rdate = now() where book_number=#{book_number}
	</update>

<!-- 	인기도서 리스트   -->
	<select id="myUseRBookList" parameterType="hashmap" resultType="net.book.db.BookDTO">
<!-- 		select * from rbook r -->
<!-- 		left join book bk -->
<!-- 		on r.book_number = bk.book_number -->
<!-- 		where r.member_id=#{member_id} order by r.rbook_date desc -->
<!-- 		limit #{startRow}, #{pageSize} -->
		
		select * from rbook rb left join bbook bb 
		on (rb.book_number=bb.book_number) join book b 
		on (rb.book_number=b.book_number) 
		where rb.member_id=#{member_id} order by rb.rbook_date desc limit #{startRow}, #{pageSize}
	</select>
	
	
	
	<select id="useBbookMemberCount" parameterType="string" resultType="int">
		select count(*) from bbook
		where member_id = #{member_id}
	</select>
	
	<select id="ReservationBookMemberCount" parameterType="string" resultType="int">
		select count(*) from rbook
		where member_id = #{member_id}
	</select>
	
	<select id="ReservationBookMemberList" parameterType="hashmap" resultType="net.book.db.BookDTO">
		select * from rbook rb left join bbook bb 
		on (rb.book_number=bb.book_number) join book b 
		on (rb.book_number=b.book_number) 
		where rb.member_id=#{member_id} limit #{startRow}, #{endSize}
		
		
<!-- 		select b.book_subject , r.rbook_date , r.rbook_check , r.rbook_num from rbook r -->
<!-- 		join book b -->
<!-- 		on r.book_number = b.book_number -->
<!-- 		where member_id = #{member_id} limit #{startRow}, #{endSize} -->
	</select>
	
	<select id="memberBbookCheck" parameterType="string" resultType="int">
		select ifnull(count(*),0) from bbook where member_id=#{member_id} and datediff(bbook_rdate,now())<![CDATA[<= 2 ]]>
	</select>
	
	
	<select id="BorrowBookCountList" resultType="int" parameterType="string">
	   select count(*) from history_bbook where member_id=#{member_id}
	</select>
	
	<select id="myUseBorrowBookList" parameterType="hashmap" resultType="net.book.db.BookDTO">
		select * from history_bbook bb
		left join book b
		on bb.book_number = b.book_number
		where member_id=#{member_id}
		limit #{startRow},#{pageSize}
	</select>
	
	<delete id="cancelRes" parameterType="hashmap">
		delete from rbook where member_id=#{member_id} and book_number=#{book_number}
	</delete>
	
	<select id="selectRbookNum" parameterType="hashmap" resultType="int">
		select rbook_num from rbook where member_id=#{member_id} and book_number=#{book_number}
	</select>
	
	<update id="updateRbookNum" parameterType="hashmap">
		update rbook set rbook_num=rbook_num-1 where book_number=#{book_number} and rbook_num<![CDATA[>#{rbook_num} ]]>
	</update>
	
	<select id="myRbook" parameterType="hashmap" resultType="net.book.db.BookDTO">
		select * from rbook rb left join bbook bb 
		on (rb.book_number=bb.book_number) join book b 
		on (rb.book_number=b.book_number) 
		where rb.member_id=#{member_id} and bb.bbook_bstate is null and rb.rbook_num=1;
	</select>

</mapper>